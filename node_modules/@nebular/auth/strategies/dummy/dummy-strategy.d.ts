import { Observable } from 'rxjs';
import { NbAuthStrategy } from '../auth-strategy';
import { NbAuthResult } from '../../services/auth-result';
import { NbDummyAuthStrategyOptions } from './dummy-strategy-options';
import { NbAuthStrategyClass } from '../../auth.options';
/**
 * Dummy auth strategy. Could be useful for auth setup when backend is not available yet.
 *
 *
 * Strategy settings.
 *
 * ```ts
 * export class NbDummyAuthStrategyOptions extends NbAuthStrategyOptions {
 *   name = 'dummy';
 *   token = {
 *     class: NbAuthSimpleToken,
 *   };
 *   delay? = 1000;
 *   alwaysFail? = false;
 * }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbDummyAuthStrategy extends NbAuthStrategy {
    protected defaultOptions: NbDummyAuthStrategyOptions;
    static setup(options: NbDummyAuthStrategyOptions): [NbAuthStrategyClass, NbDummyAuthStrategyOptions];
    authenticate(data?: any): Observable<NbAuthResult>;
    register(data?: any): Observable<NbAuthResult>;
    requestPassword(data?: any): Observable<NbAuthResult>;
    resetPassword(data?: any): Observable<NbAuthResult>;
    logout(data?: any): Observable<NbAuthResult>;
    refreshToken(data?: any): Observable<NbAuthResult>;
    protected createDummyResult(data?: any): NbAuthResult;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbDummyAuthStrategy, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbDummyAuthStrategy>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVtbXktc3RyYXRlZ3kuZC50cyIsInNvdXJjZXMiOlsiZHVtbXktc3RyYXRlZ3kuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOYkF1dGhTdHJhdGVneSB9IGZyb20gJy4uL2F1dGgtc3RyYXRlZ3knO1xuaW1wb3J0IHsgTmJBdXRoUmVzdWx0IH0gZnJvbSAnLi4vLi4vc2VydmljZXMvYXV0aC1yZXN1bHQnO1xuaW1wb3J0IHsgTmJEdW1teUF1dGhTdHJhdGVneU9wdGlvbnMgfSBmcm9tICcuL2R1bW15LXN0cmF0ZWd5LW9wdGlvbnMnO1xuaW1wb3J0IHsgTmJBdXRoU3RyYXRlZ3lDbGFzcyB9IGZyb20gJy4uLy4uL2F1dGgub3B0aW9ucyc7XG4vKipcbiAqIER1bW15IGF1dGggc3RyYXRlZ3kuIENvdWxkIGJlIHVzZWZ1bCBmb3IgYXV0aCBzZXR1cCB3aGVuIGJhY2tlbmQgaXMgbm90IGF2YWlsYWJsZSB5ZXQuXG4gKlxuICpcbiAqIFN0cmF0ZWd5IHNldHRpbmdzLlxuICpcbiAqIGBgYHRzXG4gKiBleHBvcnQgY2xhc3MgTmJEdW1teUF1dGhTdHJhdGVneU9wdGlvbnMgZXh0ZW5kcyBOYkF1dGhTdHJhdGVneU9wdGlvbnMge1xuICogICBuYW1lID0gJ2R1bW15JztcbiAqICAgdG9rZW4gPSB7XG4gKiAgICAgY2xhc3M6IE5iQXV0aFNpbXBsZVRva2VuLFxuICogICB9O1xuICogICBkZWxheT8gPSAxMDAwO1xuICogICBhbHdheXNGYWlsPyA9IGZhbHNlO1xuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iRHVtbXlBdXRoU3RyYXRlZ3kgZXh0ZW5kcyBOYkF1dGhTdHJhdGVneSB7XG4gICAgcHJvdGVjdGVkIGRlZmF1bHRPcHRpb25zOiBOYkR1bW15QXV0aFN0cmF0ZWd5T3B0aW9ucztcbiAgICBzdGF0aWMgc2V0dXAob3B0aW9uczogTmJEdW1teUF1dGhTdHJhdGVneU9wdGlvbnMpOiBbTmJBdXRoU3RyYXRlZ3lDbGFzcywgTmJEdW1teUF1dGhTdHJhdGVneU9wdGlvbnNdO1xuICAgIGF1dGhlbnRpY2F0ZShkYXRhPzogYW55KTogT2JzZXJ2YWJsZTxOYkF1dGhSZXN1bHQ+O1xuICAgIHJlZ2lzdGVyKGRhdGE/OiBhbnkpOiBPYnNlcnZhYmxlPE5iQXV0aFJlc3VsdD47XG4gICAgcmVxdWVzdFBhc3N3b3JkKGRhdGE/OiBhbnkpOiBPYnNlcnZhYmxlPE5iQXV0aFJlc3VsdD47XG4gICAgcmVzZXRQYXNzd29yZChkYXRhPzogYW55KTogT2JzZXJ2YWJsZTxOYkF1dGhSZXN1bHQ+O1xuICAgIGxvZ291dChkYXRhPzogYW55KTogT2JzZXJ2YWJsZTxOYkF1dGhSZXN1bHQ+O1xuICAgIHJlZnJlc2hUb2tlbihkYXRhPzogYW55KTogT2JzZXJ2YWJsZTxOYkF1dGhSZXN1bHQ+O1xuICAgIHByb3RlY3RlZCBjcmVhdGVEdW1teVJlc3VsdChkYXRhPzogYW55KTogTmJBdXRoUmVzdWx0O1xufVxuIl19