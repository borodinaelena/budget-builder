import { HttpClient } from '@angular/common/http';
import { ActivatedRoute } from '@angular/router';
import { Observable } from 'rxjs';
import { NbAuthStrategy } from '../auth-strategy';
import { NbAuthRefreshableToken, NbAuthToken } from '../../services/token/token';
import { NbAuthResult } from '../../services/auth-result';
import { NbOAuth2AuthStrategyOptions } from './oauth2-strategy.options';
import { NbAuthStrategyClass } from '../../auth.options';
/**
 * OAuth2 authentication strategy.
 *
 * Strategy settings:
 *
 * ```ts
 * export enum NbOAuth2ResponseType {
 *   CODE = 'code',
 *   TOKEN = 'token',
 * }
 *
 * export enum NbOAuth2GrantType {
 *   AUTHORIZATION_CODE = 'authorization_code',
 *   PASSWORD = 'password',
 *   REFRESH_TOKEN = 'refresh_token',
 * }
 *
 * export class NbOAuth2AuthStrategyOptions {
 *   name: string;
 *   baseEndpoint?: string = '';
 *   clientId: string = '';
 *   clientSecret: string = '';
 *   clientAuthMethod: string = NbOAuth2ClientAuthMethod.NONE;
 *   redirect?: { success?: string; failure?: string } = {
 *     success: '/',
 *     failure: null,
 *   };
 *   defaultErrors?: any[] = ['Something went wrong, please try again.'];
 *   defaultMessages?: any[] = ['You have been successfully authenticated.'];
 *   authorize?: {
 *     endpoint?: string;
 *     redirectUri?: string;
 *     responseType?: string;
 *     requireValidToken: true,
 *     scope?: string;
 *     state?: string;
 *     params?: { [key: string]: string };
 *   } = {
 *     endpoint: 'authorize',
 *     responseType: NbOAuth2ResponseType.CODE,
 *   };
 *   token?: {
 *     endpoint?: string;
 *     grantType?: string;
 *     requireValidToken: true,
 *     redirectUri?: string;
 *     scope?: string;
 *     class: NbAuthTokenClass,
 *   } = {
 *     endpoint: 'token',
 *     grantType: NbOAuth2GrantType.AUTHORIZATION_CODE,
 *     class: NbAuthOAuth2Token,
 *   };
 *   refresh?: {
 *     endpoint?: string;
 *     grantType?: string;
 *     scope?: string;
 *     requireValidToken: true,
 *   } = {
 *     endpoint: 'token',
 *     grantType: NbOAuth2GrantType.REFRESH_TOKEN,
 *   };
 * }
 * ```
 *
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbOAuth2AuthStrategy extends NbAuthStrategy {
    protected http: HttpClient;
    protected route: ActivatedRoute;
    protected window: any;
    static setup(options: NbOAuth2AuthStrategyOptions): [NbAuthStrategyClass, NbOAuth2AuthStrategyOptions];
    get responseType(): any;
    get clientAuthMethod(): any;
    protected redirectResultHandlers: {
        [key: string]: Function;
    };
    protected redirectResults: {
        [key: string]: Function;
    };
    protected defaultOptions: NbOAuth2AuthStrategyOptions;
    constructor(http: HttpClient, route: ActivatedRoute, window: any);
    authenticate(data?: any): Observable<NbAuthResult>;
    getAuthorizationResult(): Observable<any>;
    refreshToken(token: NbAuthRefreshableToken): Observable<NbAuthResult>;
    passwordToken(username: string, password: string): Observable<NbAuthResult>;
    protected authorizeRedirect(): void;
    protected isRedirectResult(): Observable<boolean>;
    protected requestToken(code: string): Observable<NbAuthResult>;
    protected buildCodeRequestData(code: string): any;
    protected buildRefreshRequestData(token: NbAuthRefreshableToken): any;
    protected buildPasswordRequestData(username: string, password: string): string;
    protected buildAuthHeader(): any;
    protected cleanParams(params: any): any;
    protected addCredentialsToParams(params: any): any;
    protected handleResponseError(res: any): Observable<NbAuthResult>;
    protected buildRedirectUrl(): string;
    protected parseHashAsQueryParams(hash: string): {
        [key: string]: string;
    };
    protected urlEncodeParameters(params: any): string;
    protected createRefreshedToken(res: any, existingToken: NbAuthRefreshableToken, requireValidToken: boolean): NbAuthToken;
    register(data?: any): Observable<NbAuthResult>;
    requestPassword(data?: any): Observable<NbAuthResult>;
    resetPassword(data?: any): Observable<NbAuthResult>;
    logout(): Observable<NbAuthResult>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbOAuth2AuthStrategy, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbOAuth2AuthStrategy>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2F1dGgyLXN0cmF0ZWd5LmQudHMiLCJzb3VyY2VzIjpbIm9hdXRoMi1zdHJhdGVneS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOYkF1dGhTdHJhdGVneSB9IGZyb20gJy4uL2F1dGgtc3RyYXRlZ3knO1xuaW1wb3J0IHsgTmJBdXRoUmVmcmVzaGFibGVUb2tlbiwgTmJBdXRoVG9rZW4gfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy90b2tlbi90b2tlbic7XG5pbXBvcnQgeyBOYkF1dGhSZXN1bHQgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9hdXRoLXJlc3VsdCc7XG5pbXBvcnQgeyBOYk9BdXRoMkF1dGhTdHJhdGVneU9wdGlvbnMgfSBmcm9tICcuL29hdXRoMi1zdHJhdGVneS5vcHRpb25zJztcbmltcG9ydCB7IE5iQXV0aFN0cmF0ZWd5Q2xhc3MgfSBmcm9tICcuLi8uLi9hdXRoLm9wdGlvbnMnO1xuLyoqXG4gKiBPQXV0aDIgYXV0aGVudGljYXRpb24gc3RyYXRlZ3kuXG4gKlxuICogU3RyYXRlZ3kgc2V0dGluZ3M6XG4gKlxuICogYGBgdHNcbiAqIGV4cG9ydCBlbnVtIE5iT0F1dGgyUmVzcG9uc2VUeXBlIHtcbiAqICAgQ09ERSA9ICdjb2RlJyxcbiAqICAgVE9LRU4gPSAndG9rZW4nLFxuICogfVxuICpcbiAqIGV4cG9ydCBlbnVtIE5iT0F1dGgyR3JhbnRUeXBlIHtcbiAqICAgQVVUSE9SSVpBVElPTl9DT0RFID0gJ2F1dGhvcml6YXRpb25fY29kZScsXG4gKiAgIFBBU1NXT1JEID0gJ3Bhc3N3b3JkJyxcbiAqICAgUkVGUkVTSF9UT0tFTiA9ICdyZWZyZXNoX3Rva2VuJyxcbiAqIH1cbiAqXG4gKiBleHBvcnQgY2xhc3MgTmJPQXV0aDJBdXRoU3RyYXRlZ3lPcHRpb25zIHtcbiAqICAgbmFtZTogc3RyaW5nO1xuICogICBiYXNlRW5kcG9pbnQ/OiBzdHJpbmcgPSAnJztcbiAqICAgY2xpZW50SWQ6IHN0cmluZyA9ICcnO1xuICogICBjbGllbnRTZWNyZXQ6IHN0cmluZyA9ICcnO1xuICogICBjbGllbnRBdXRoTWV0aG9kOiBzdHJpbmcgPSBOYk9BdXRoMkNsaWVudEF1dGhNZXRob2QuTk9ORTtcbiAqICAgcmVkaXJlY3Q/OiB7IHN1Y2Nlc3M/OiBzdHJpbmc7IGZhaWx1cmU/OiBzdHJpbmcgfSA9IHtcbiAqICAgICBzdWNjZXNzOiAnLycsXG4gKiAgICAgZmFpbHVyZTogbnVsbCxcbiAqICAgfTtcbiAqICAgZGVmYXVsdEVycm9ycz86IGFueVtdID0gWydTb21ldGhpbmcgd2VudCB3cm9uZywgcGxlYXNlIHRyeSBhZ2Fpbi4nXTtcbiAqICAgZGVmYXVsdE1lc3NhZ2VzPzogYW55W10gPSBbJ1lvdSBoYXZlIGJlZW4gc3VjY2Vzc2Z1bGx5IGF1dGhlbnRpY2F0ZWQuJ107XG4gKiAgIGF1dGhvcml6ZT86IHtcbiAqICAgICBlbmRwb2ludD86IHN0cmluZztcbiAqICAgICByZWRpcmVjdFVyaT86IHN0cmluZztcbiAqICAgICByZXNwb25zZVR5cGU/OiBzdHJpbmc7XG4gKiAgICAgcmVxdWlyZVZhbGlkVG9rZW46IHRydWUsXG4gKiAgICAgc2NvcGU/OiBzdHJpbmc7XG4gKiAgICAgc3RhdGU/OiBzdHJpbmc7XG4gKiAgICAgcGFyYW1zPzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbiAqICAgfSA9IHtcbiAqICAgICBlbmRwb2ludDogJ2F1dGhvcml6ZScsXG4gKiAgICAgcmVzcG9uc2VUeXBlOiBOYk9BdXRoMlJlc3BvbnNlVHlwZS5DT0RFLFxuICogICB9O1xuICogICB0b2tlbj86IHtcbiAqICAgICBlbmRwb2ludD86IHN0cmluZztcbiAqICAgICBncmFudFR5cGU/OiBzdHJpbmc7XG4gKiAgICAgcmVxdWlyZVZhbGlkVG9rZW46IHRydWUsXG4gKiAgICAgcmVkaXJlY3RVcmk/OiBzdHJpbmc7XG4gKiAgICAgc2NvcGU/OiBzdHJpbmc7XG4gKiAgICAgY2xhc3M6IE5iQXV0aFRva2VuQ2xhc3MsXG4gKiAgIH0gPSB7XG4gKiAgICAgZW5kcG9pbnQ6ICd0b2tlbicsXG4gKiAgICAgZ3JhbnRUeXBlOiBOYk9BdXRoMkdyYW50VHlwZS5BVVRIT1JJWkFUSU9OX0NPREUsXG4gKiAgICAgY2xhc3M6IE5iQXV0aE9BdXRoMlRva2VuLFxuICogICB9O1xuICogICByZWZyZXNoPzoge1xuICogICAgIGVuZHBvaW50Pzogc3RyaW5nO1xuICogICAgIGdyYW50VHlwZT86IHN0cmluZztcbiAqICAgICBzY29wZT86IHN0cmluZztcbiAqICAgICByZXF1aXJlVmFsaWRUb2tlbjogdHJ1ZSxcbiAqICAgfSA9IHtcbiAqICAgICBlbmRwb2ludDogJ3Rva2VuJyxcbiAqICAgICBncmFudFR5cGU6IE5iT0F1dGgyR3JhbnRUeXBlLlJFRlJFU0hfVE9LRU4sXG4gKiAgIH07XG4gKiB9XG4gKiBgYGBcbiAqXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iT0F1dGgyQXV0aFN0cmF0ZWd5IGV4dGVuZHMgTmJBdXRoU3RyYXRlZ3kge1xuICAgIHByb3RlY3RlZCBodHRwOiBIdHRwQ2xpZW50O1xuICAgIHByb3RlY3RlZCByb3V0ZTogQWN0aXZhdGVkUm91dGU7XG4gICAgcHJvdGVjdGVkIHdpbmRvdzogYW55O1xuICAgIHN0YXRpYyBzZXR1cChvcHRpb25zOiBOYk9BdXRoMkF1dGhTdHJhdGVneU9wdGlvbnMpOiBbTmJBdXRoU3RyYXRlZ3lDbGFzcywgTmJPQXV0aDJBdXRoU3RyYXRlZ3lPcHRpb25zXTtcbiAgICBnZXQgcmVzcG9uc2VUeXBlKCk6IGFueTtcbiAgICBnZXQgY2xpZW50QXV0aE1ldGhvZCgpOiBhbnk7XG4gICAgcHJvdGVjdGVkIHJlZGlyZWN0UmVzdWx0SGFuZGxlcnM6IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogRnVuY3Rpb247XG4gICAgfTtcbiAgICBwcm90ZWN0ZWQgcmVkaXJlY3RSZXN1bHRzOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IEZ1bmN0aW9uO1xuICAgIH07XG4gICAgcHJvdGVjdGVkIGRlZmF1bHRPcHRpb25zOiBOYk9BdXRoMkF1dGhTdHJhdGVneU9wdGlvbnM7XG4gICAgY29uc3RydWN0b3IoaHR0cDogSHR0cENsaWVudCwgcm91dGU6IEFjdGl2YXRlZFJvdXRlLCB3aW5kb3c6IGFueSk7XG4gICAgYXV0aGVudGljYXRlKGRhdGE/OiBhbnkpOiBPYnNlcnZhYmxlPE5iQXV0aFJlc3VsdD47XG4gICAgZ2V0QXV0aG9yaXphdGlvblJlc3VsdCgpOiBPYnNlcnZhYmxlPGFueT47XG4gICAgcmVmcmVzaFRva2VuKHRva2VuOiBOYkF1dGhSZWZyZXNoYWJsZVRva2VuKTogT2JzZXJ2YWJsZTxOYkF1dGhSZXN1bHQ+O1xuICAgIHBhc3N3b3JkVG9rZW4odXNlcm5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyk6IE9ic2VydmFibGU8TmJBdXRoUmVzdWx0PjtcbiAgICBwcm90ZWN0ZWQgYXV0aG9yaXplUmVkaXJlY3QoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgaXNSZWRpcmVjdFJlc3VsdCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICAgIHByb3RlY3RlZCByZXF1ZXN0VG9rZW4oY29kZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxOYkF1dGhSZXN1bHQ+O1xuICAgIHByb3RlY3RlZCBidWlsZENvZGVSZXF1ZXN0RGF0YShjb2RlOiBzdHJpbmcpOiBhbnk7XG4gICAgcHJvdGVjdGVkIGJ1aWxkUmVmcmVzaFJlcXVlc3REYXRhKHRva2VuOiBOYkF1dGhSZWZyZXNoYWJsZVRva2VuKTogYW55O1xuICAgIHByb3RlY3RlZCBidWlsZFBhc3N3b3JkUmVxdWVzdERhdGEodXNlcm5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyk6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgYnVpbGRBdXRoSGVhZGVyKCk6IGFueTtcbiAgICBwcm90ZWN0ZWQgY2xlYW5QYXJhbXMocGFyYW1zOiBhbnkpOiBhbnk7XG4gICAgcHJvdGVjdGVkIGFkZENyZWRlbnRpYWxzVG9QYXJhbXMocGFyYW1zOiBhbnkpOiBhbnk7XG4gICAgcHJvdGVjdGVkIGhhbmRsZVJlc3BvbnNlRXJyb3IocmVzOiBhbnkpOiBPYnNlcnZhYmxlPE5iQXV0aFJlc3VsdD47XG4gICAgcHJvdGVjdGVkIGJ1aWxkUmVkaXJlY3RVcmwoKTogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBwYXJzZUhhc2hBc1F1ZXJ5UGFyYW1zKGhhc2g6IHN0cmluZyk6IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xuICAgIH07XG4gICAgcHJvdGVjdGVkIHVybEVuY29kZVBhcmFtZXRlcnMocGFyYW1zOiBhbnkpOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIGNyZWF0ZVJlZnJlc2hlZFRva2VuKHJlczogYW55LCBleGlzdGluZ1Rva2VuOiBOYkF1dGhSZWZyZXNoYWJsZVRva2VuLCByZXF1aXJlVmFsaWRUb2tlbjogYm9vbGVhbik6IE5iQXV0aFRva2VuO1xuICAgIHJlZ2lzdGVyKGRhdGE/OiBhbnkpOiBPYnNlcnZhYmxlPE5iQXV0aFJlc3VsdD47XG4gICAgcmVxdWVzdFBhc3N3b3JkKGRhdGE/OiBhbnkpOiBPYnNlcnZhYmxlPE5iQXV0aFJlc3VsdD47XG4gICAgcmVzZXRQYXNzd29yZChkYXRhPzogYW55KTogT2JzZXJ2YWJsZTxOYkF1dGhSZXN1bHQ+O1xuICAgIGxvZ291dCgpOiBPYnNlcnZhYmxlPE5iQXV0aFJlc3VsdD47XG59XG4iXX0=