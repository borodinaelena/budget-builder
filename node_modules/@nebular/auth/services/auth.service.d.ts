import { Observable } from 'rxjs';
import { NbAuthStrategy } from '../strategies/auth-strategy';
import { NbAuthResult } from './auth-result';
import { NbTokenService } from './token/token.service';
import { NbAuthToken } from './token/token';
/**
 * Common authentication service.
 * Should be used to as an interlayer between UI Components and Auth Strategy.
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbAuthService {
    protected tokenService: NbTokenService;
    protected strategies: any;
    constructor(tokenService: NbTokenService, strategies: any);
    /**
     * Retrieves current authenticated token stored
     * @returns {Observable<any>}
     */
    getToken(): Observable<NbAuthToken>;
    /**
     * Returns true if auth token is present in the token storage
     * @returns {Observable<boolean>}
     */
    isAuthenticated(): Observable<boolean>;
    /**
     * Returns true if valid auth token is present in the token storage.
     * If not, calls the strategy refreshToken, and returns isAuthenticated() if success, false otherwise
     * @returns {Observable<boolean>}
     */
    isAuthenticatedOrRefresh(): Observable<boolean>;
    /**
     * Returns tokens stream
     * @returns {Observable<NbAuthSimpleToken>}
     */
    onTokenChange(): Observable<NbAuthToken>;
    /**
     * Returns authentication status stream
     * @returns {Observable<boolean>}
     */
    onAuthenticationChange(): Observable<boolean>;
    /**
     * Authenticates with the selected strategy
     * Stores received token in the token storage
     *
     * Example:
     * authenticate('email', {email: 'email@example.com', password: 'test'})
     *
     * @param strategyName
     * @param data
     * @returns {Observable<NbAuthResult>}
     */
    authenticate(strategyName: string, data?: any): Observable<NbAuthResult>;
    /**
     * Registers with the selected strategy
     * Stores received token in the token storage
     *
     * Example:
     * register('email', {email: 'email@example.com', name: 'Some Name', password: 'test'})
     *
     * @param strategyName
     * @param data
     * @returns {Observable<NbAuthResult>}
     */
    register(strategyName: string, data?: any): Observable<NbAuthResult>;
    /**
     * Sign outs with the selected strategy
     * Removes token from the token storage
     *
     * Example:
     * logout('email')
     *
     * @param strategyName
     * @returns {Observable<NbAuthResult>}
     */
    logout(strategyName: string): Observable<NbAuthResult>;
    /**
     * Sends forgot password request to the selected strategy
     *
     * Example:
     * requestPassword('email', {email: 'email@example.com'})
     *
     * @param strategyName
     * @param data
     * @returns {Observable<NbAuthResult>}
     */
    requestPassword(strategyName: string, data?: any): Observable<NbAuthResult>;
    /**
     * Tries to reset password with the selected strategy
     *
     * Example:
     * resetPassword('email', {newPassword: 'test'})
     *
     * @param strategyName
     * @param data
     * @returns {Observable<NbAuthResult>}
     */
    resetPassword(strategyName: string, data?: any): Observable<NbAuthResult>;
    /**
     * Sends a refresh token request
     * Stores received token in the token storage
     *
     * Example:
     * refreshToken('email', {token: token})
     *
     * @param {string} strategyName
     * @param data
     * @returns {Observable<NbAuthResult>}
     */
    refreshToken(strategyName: string, data?: any): Observable<NbAuthResult>;
    /**
     * Get registered strategy by name
     *
     * Example:
     * getStrategy('email')
     *
     * @param {string} provider
     * @returns {NbAbstractAuthProvider}
     */
    protected getStrategy(strategyName: string): NbAuthStrategy;
    private processResultToken;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbAuthService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbAuthService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImF1dGguc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5iQXV0aFN0cmF0ZWd5IH0gZnJvbSAnLi4vc3RyYXRlZ2llcy9hdXRoLXN0cmF0ZWd5JztcbmltcG9ydCB7IE5iQXV0aFJlc3VsdCB9IGZyb20gJy4vYXV0aC1yZXN1bHQnO1xuaW1wb3J0IHsgTmJUb2tlblNlcnZpY2UgfSBmcm9tICcuL3Rva2VuL3Rva2VuLnNlcnZpY2UnO1xuaW1wb3J0IHsgTmJBdXRoVG9rZW4gfSBmcm9tICcuL3Rva2VuL3Rva2VuJztcbi8qKlxuICogQ29tbW9uIGF1dGhlbnRpY2F0aW9uIHNlcnZpY2UuXG4gKiBTaG91bGQgYmUgdXNlZCB0byBhcyBhbiBpbnRlcmxheWVyIGJldHdlZW4gVUkgQ29tcG9uZW50cyBhbmQgQXV0aCBTdHJhdGVneS5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJBdXRoU2VydmljZSB7XG4gICAgcHJvdGVjdGVkIHRva2VuU2VydmljZTogTmJUb2tlblNlcnZpY2U7XG4gICAgcHJvdGVjdGVkIHN0cmF0ZWdpZXM6IGFueTtcbiAgICBjb25zdHJ1Y3Rvcih0b2tlblNlcnZpY2U6IE5iVG9rZW5TZXJ2aWNlLCBzdHJhdGVnaWVzOiBhbnkpO1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBjdXJyZW50IGF1dGhlbnRpY2F0ZWQgdG9rZW4gc3RvcmVkXG4gICAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn1cbiAgICAgKi9cbiAgICBnZXRUb2tlbigpOiBPYnNlcnZhYmxlPE5iQXV0aFRva2VuPjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgYXV0aCB0b2tlbiBpcyBwcmVzZW50IGluIHRoZSB0b2tlbiBzdG9yYWdlXG4gICAgICogQHJldHVybnMge09ic2VydmFibGU8Ym9vbGVhbj59XG4gICAgICovXG4gICAgaXNBdXRoZW50aWNhdGVkKCk6IE9ic2VydmFibGU8Ym9vbGVhbj47XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHZhbGlkIGF1dGggdG9rZW4gaXMgcHJlc2VudCBpbiB0aGUgdG9rZW4gc3RvcmFnZS5cbiAgICAgKiBJZiBub3QsIGNhbGxzIHRoZSBzdHJhdGVneSByZWZyZXNoVG9rZW4sIGFuZCByZXR1cm5zIGlzQXV0aGVudGljYXRlZCgpIGlmIHN1Y2Nlc3MsIGZhbHNlIG90aGVyd2lzZVxuICAgICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGJvb2xlYW4+fVxuICAgICAqL1xuICAgIGlzQXV0aGVudGljYXRlZE9yUmVmcmVzaCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdG9rZW5zIHN0cmVhbVxuICAgICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPE5iQXV0aFNpbXBsZVRva2VuPn1cbiAgICAgKi9cbiAgICBvblRva2VuQ2hhbmdlKCk6IE9ic2VydmFibGU8TmJBdXRoVG9rZW4+O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYXV0aGVudGljYXRpb24gc3RhdHVzIHN0cmVhbVxuICAgICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGJvb2xlYW4+fVxuICAgICAqL1xuICAgIG9uQXV0aGVudGljYXRpb25DaGFuZ2UoKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcbiAgICAvKipcbiAgICAgKiBBdXRoZW50aWNhdGVzIHdpdGggdGhlIHNlbGVjdGVkIHN0cmF0ZWd5XG4gICAgICogU3RvcmVzIHJlY2VpdmVkIHRva2VuIGluIHRoZSB0b2tlbiBzdG9yYWdlXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqIGF1dGhlbnRpY2F0ZSgnZW1haWwnLCB7ZW1haWw6ICdlbWFpbEBleGFtcGxlLmNvbScsIHBhc3N3b3JkOiAndGVzdCd9KVxuICAgICAqXG4gICAgICogQHBhcmFtIHN0cmF0ZWd5TmFtZVxuICAgICAqIEBwYXJhbSBkYXRhXG4gICAgICogQHJldHVybnMge09ic2VydmFibGU8TmJBdXRoUmVzdWx0Pn1cbiAgICAgKi9cbiAgICBhdXRoZW50aWNhdGUoc3RyYXRlZ3lOYW1lOiBzdHJpbmcsIGRhdGE/OiBhbnkpOiBPYnNlcnZhYmxlPE5iQXV0aFJlc3VsdD47XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIHdpdGggdGhlIHNlbGVjdGVkIHN0cmF0ZWd5XG4gICAgICogU3RvcmVzIHJlY2VpdmVkIHRva2VuIGluIHRoZSB0b2tlbiBzdG9yYWdlXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqIHJlZ2lzdGVyKCdlbWFpbCcsIHtlbWFpbDogJ2VtYWlsQGV4YW1wbGUuY29tJywgbmFtZTogJ1NvbWUgTmFtZScsIHBhc3N3b3JkOiAndGVzdCd9KVxuICAgICAqXG4gICAgICogQHBhcmFtIHN0cmF0ZWd5TmFtZVxuICAgICAqIEBwYXJhbSBkYXRhXG4gICAgICogQHJldHVybnMge09ic2VydmFibGU8TmJBdXRoUmVzdWx0Pn1cbiAgICAgKi9cbiAgICByZWdpc3RlcihzdHJhdGVneU5hbWU6IHN0cmluZywgZGF0YT86IGFueSk6IE9ic2VydmFibGU8TmJBdXRoUmVzdWx0PjtcbiAgICAvKipcbiAgICAgKiBTaWduIG91dHMgd2l0aCB0aGUgc2VsZWN0ZWQgc3RyYXRlZ3lcbiAgICAgKiBSZW1vdmVzIHRva2VuIGZyb20gdGhlIHRva2VuIHN0b3JhZ2VcbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogbG9nb3V0KCdlbWFpbCcpXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RyYXRlZ3lOYW1lXG4gICAgICogQHJldHVybnMge09ic2VydmFibGU8TmJBdXRoUmVzdWx0Pn1cbiAgICAgKi9cbiAgICBsb2dvdXQoc3RyYXRlZ3lOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPE5iQXV0aFJlc3VsdD47XG4gICAgLyoqXG4gICAgICogU2VuZHMgZm9yZ290IHBhc3N3b3JkIHJlcXVlc3QgdG8gdGhlIHNlbGVjdGVkIHN0cmF0ZWd5XG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqIHJlcXVlc3RQYXNzd29yZCgnZW1haWwnLCB7ZW1haWw6ICdlbWFpbEBleGFtcGxlLmNvbSd9KVxuICAgICAqXG4gICAgICogQHBhcmFtIHN0cmF0ZWd5TmFtZVxuICAgICAqIEBwYXJhbSBkYXRhXG4gICAgICogQHJldHVybnMge09ic2VydmFibGU8TmJBdXRoUmVzdWx0Pn1cbiAgICAgKi9cbiAgICByZXF1ZXN0UGFzc3dvcmQoc3RyYXRlZ3lOYW1lOiBzdHJpbmcsIGRhdGE/OiBhbnkpOiBPYnNlcnZhYmxlPE5iQXV0aFJlc3VsdD47XG4gICAgLyoqXG4gICAgICogVHJpZXMgdG8gcmVzZXQgcGFzc3dvcmQgd2l0aCB0aGUgc2VsZWN0ZWQgc3RyYXRlZ3lcbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogcmVzZXRQYXNzd29yZCgnZW1haWwnLCB7bmV3UGFzc3dvcmQ6ICd0ZXN0J30pXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RyYXRlZ3lOYW1lXG4gICAgICogQHBhcmFtIGRhdGFcbiAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxOYkF1dGhSZXN1bHQ+fVxuICAgICAqL1xuICAgIHJlc2V0UGFzc3dvcmQoc3RyYXRlZ3lOYW1lOiBzdHJpbmcsIGRhdGE/OiBhbnkpOiBPYnNlcnZhYmxlPE5iQXV0aFJlc3VsdD47XG4gICAgLyoqXG4gICAgICogU2VuZHMgYSByZWZyZXNoIHRva2VuIHJlcXVlc3RcbiAgICAgKiBTdG9yZXMgcmVjZWl2ZWQgdG9rZW4gaW4gdGhlIHRva2VuIHN0b3JhZ2VcbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogcmVmcmVzaFRva2VuKCdlbWFpbCcsIHt0b2tlbjogdG9rZW59KVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmF0ZWd5TmFtZVxuICAgICAqIEBwYXJhbSBkYXRhXG4gICAgICogQHJldHVybnMge09ic2VydmFibGU8TmJBdXRoUmVzdWx0Pn1cbiAgICAgKi9cbiAgICByZWZyZXNoVG9rZW4oc3RyYXRlZ3lOYW1lOiBzdHJpbmcsIGRhdGE/OiBhbnkpOiBPYnNlcnZhYmxlPE5iQXV0aFJlc3VsdD47XG4gICAgLyoqXG4gICAgICogR2V0IHJlZ2lzdGVyZWQgc3RyYXRlZ3kgYnkgbmFtZVxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiBnZXRTdHJhdGVneSgnZW1haWwnKVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3ZpZGVyXG4gICAgICogQHJldHVybnMge05iQWJzdHJhY3RBdXRoUHJvdmlkZXJ9XG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldFN0cmF0ZWd5KHN0cmF0ZWd5TmFtZTogc3RyaW5nKTogTmJBdXRoU3RyYXRlZ3k7XG4gICAgcHJpdmF0ZSBwcm9jZXNzUmVzdWx0VG9rZW47XG59XG4iXX0=